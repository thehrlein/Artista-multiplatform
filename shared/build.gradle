plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}

kotlin {
    targets {

        //Xcode sets SDK_NAME environment variable - based on whether the
        //target device is a simulator or a real device, the preset should vary
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        //outputKinds - FRAMEWORK would mean that the shared code would be exported as a FRAMEWORK
        // EXECUTABLE - produces a standalone executable that can be used to run as an app
        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('SharedCode')
            }
        }

        //create a target for Android from presets.jvm
        fromPreset(presets.jvm, 'android')
    }

    //we have 3 different sourceSets for common, android and iOS.
    //each sourceSet can have their own set of dependencies and configurations
    sourceSets {
        commonMain {
            kotlin.srcDir('src/commonMain/kotlin/com/tobiapplications/shared')

            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.11.1"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.2"
                implementation "io.ktor:ktor-client-core:1.2.2"
                implementation "io.ktor:ktor-client-json:1.2.2"
                implementation "io.ktor:ktor-client-logging:1.2.2"
                implementation "io.ktor:ktor-client-serialization:1.2.2"
            }
        }

        androidMain {
            kotlin.srcDir('src/androidMain/kotlin/com/tobiapplications/shared')

            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.1"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.2"

                implementation "io.ktor:ktor-client-core-jvm:1.2.2"
                implementation "io.ktor:ktor-client-json-jvm:1.2.2"
                implementation "io.ktor:ktor-client-logging-jvm:1.2.2"
                implementation "io.ktor:ktor-client-serialization-jvm:1.2.2"
            }
        }
        iosMain {
            kotlin.srcDir('src/iosMain/kotlin/com/tobiapplications/shared')

            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.0-RC"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.11.1"

                implementation "io.ktor:ktor-client-ios:1.2.2"
                implementation "io.ktor:ktor-client-core-native:1.2.2"
                implementation "io.ktor:ktor-client-json-native:1.2.2"
                implementation "io.ktor:ktor-client-logging-native:1.2.2"
                implementation "io.ktor:ktor-client-serialization-native:1.2.2"
            }
        }
    }
}


configurations {
    compileClasspath
}


// This task attaches native framework built from ios module to Xcode project
// Don't run this task directly,
// Xcode runs this task itself during its build process when we configure it.
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew)
// and gradlw is in executable mode (chmod +x gradlew)
// Xcode-specific
task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode